struct Tetromino {
    minos: [Mino; 4],
    center: Position,
}

impl Tetromino {}

struct Mino {
    x_to_center: HalfStep,
    y_to_center: HalfStep,
}

impl Mino {
    fn rotate(&self, rotation: Rotation) -> Self {
        const NINETY_DEG_COS: f32 = -0.00000004371138828673792886547744274139404296875;
        const NINETY_DEG_SIN: f32 = 1.0;

        let rotation_multiplier = rotation.rotation_multiplier();

        let ninety_deg_cos = NINETY_DEG_COS * rotation_multiplier as f32;
        let ninety_deg_sin = NINETY_DEG_SIN * rotation_multiplier as f32;

        let x_to_center: f32 = self.x_to_center.into();
        let y_to_center: f32 = self.y_to_center.into();

        Mino {
            x_to_center: (x_to_center * ninety_deg_cos - y_to_center * ninety_deg_sin).into(),
            y_to_center: (x_to_center * ninety_deg_sin + y_to_center * ninety_deg_cos).into(),
        }
    }
}

enum Rotation {
    Clockwise,
    Counterclockwise,
}

impl Rotation {
    fn rotation_multiplier(&self) -> i8 {
        match self {
            Rotation::Clockwise => -1,
            Rotation::Counterclockwise => 1,
        }
    }
}

struct Position {
    row: f32,
    column: HalfStep,
}

struct SnappedPosition {
    row: HalfStep,
    column: HalfStep,
}

impl From<Position> for SnappedPosition {
    fn from(position: Position) -> Self {
        SnappedPosition {
            row: position.row.round().into(),
            column: position.column,
        }
    }
}

#[derive(Debug, Copy, Clone)]
struct HalfStep(i8);

impl From<HalfStep> for f32 {
    fn from(half_step: HalfStep) -> Self {
        (half_step.0 as f32) / 2.0
    }
}

impl From<f32> for HalfStep {
    fn from(position: f32) -> Self {
        HalfStep(((position.abs() * 2.0).round() * position.signum()) as i8)
    }
}

enum TetrominoType {
    O,
    I,
    T,
    L,
    J,
    S,
    Z,
}

impl TetrominoType {
    fn new(&self) -> Tetromino {
        match self {
            TetrominoType::O => Tetromino {
                center: Position {
                    row: 19.5 - 1.0,
                    column: (5.5 - 1.0).into(),
                },
                minos: [
                    Mino {
                        x_to_center: (-0.5).into(),
                        y_to_center: 0.5.into(),
                    },
                    Mino {
                        x_to_center: (0.5).into(),
                        y_to_center: (0.5).into(),
                    },
                    Mino {
                        x_to_center: (0.5).into(),
                        y_to_center: (-0.5).into(),
                    },
                    Mino {
                        x_to_center: (-0.5).into(),
                        y_to_center: (-0.5).into(),
                    },
                ],
            },
            TetrominoType::I => Tetromino {
                center: Position {
                    row: 18.5 - 1.0,
                    column: 5.5 - 1.0,
                },
                minos: [
                    Mino {
                        x_to_center: (-1.5).into(),
                        y_to_center: (0.5).into(),
                    },
                    Mino {
                        x_to_center: (-0.5).into(),
                        y_to_center: (0.5).into(),
                    },
                    Mino {
                        x_to_center: (0.5).into(),
                        y_to_center: (0.5).into(),
                    },
                    Mino {
                        x_to_center: (1.5).into(),
                        y_to_center: (0.5).into(),
                    },
                ],
            },
            TetrominoType::T => Tetromino {
                center: Position {
                    row: 19.0 - 1.0,
                    column: (5.0 - 1.0).into(),
                },
                minos: [
                    Mino {
                        x_to_center: (0.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (-1.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (0.0).into(),
                        y_to_center: (1.0).into(),
                    },
                    Mino {
                        x_to_center: (1.0).into(),
                        y_to_center: (0.0).into(),
                    },
                ],
            },
            TetrominoType::L => Tetromino {
                center: Position {
                    column: 5.0 - 1.0,
                    row: 19.0 - 1.0,
                },
                minos: [
                    Mino {
                        x_to_center: (0.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (-1.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (1.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (1.0).into(),
                        y_to_center: (1.0).into(),
                    },
                ],
            },
            TetrominoType::J => Tetromino {
                center: Position {
                    row: 19.0 - 1.0,
                    column: 5.0 - 1.0,
                },
                minos: [
                    Mino {
                        x_to_center: (0.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (-1.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (1.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (-1.0).into(),
                        y_to_center: (1.0).into(),
                    },
                ],
            },
            TetrominoType::S => Tetromino {
                center: Position {
                    row: 19.0 - 1.0,
                    column: 5.0 - 1.0,
                },
                minos: [
                    Mino {
                        x_to_center: (0.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (-1.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (0.0).into(),
                        y_to_center: (1.0).into(),
                    },
                    Mino {
                        x_to_center: (1.0).into(),
                        y_to_center: (1.0).into(),
                    },
                ],
            },
            TetrominoType::Z => Tetromino {
                center: Position {
                    row: 19.0 - 1.0,
                    column: 5.0 - 1.0,
                },
                minos: [
                    Mino {
                        x_to_center: (0.0).into(),
                        y_to_center: (0.0).into(),
                    },
                    Mino {
                        x_to_center: (0.0).into(),
                        y_to_center: (1.0).into(),
                    },
                    Mino {
                        x_to_center: (-1.0).into(),
                        y_to_center: (1.0).into(),
                    },
                    Mino {
                        x_to_center: (1.0).into(),
                        y_to_center: (0.0).into(),
                    },
                ],
            },
        }
    }
}
